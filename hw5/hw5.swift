
//1. В рамках прошлого дз был создан класс пиццерии с
//переменной, в которой хранится пицца, удалите ее.
//Необходимо создать структуру картошки фри,
//в которой будет стоимость и размер картошки и сделать так,
//чтобы в классе пиццерии была одна переменная,
//в которую можно было бы класть и пиццу, и картошку фри.

struct FrenchFries {
    var cost: Double                  // Стоимость картошки фри
    var size: String                  // Размер картошки фри
}

class Pizzeria {
    var menu: [String: Double] = ["Margherita": 10.99, "Pepperoni": 12.99]  //словарь, который содержит названия пицц и соответствующие им цены
    var orders: [(pizza: String, quantity: Int)] = []    //массив кортежей содержит название пиццы типа `String` и количество заказанных пицц типа `Int`.
    var frenchFries: FrenchFries?                               //может содержать информацию о картошке фри.

    func addPizzaToOrder(pizza: String, quantity: Int) {   //метод используется для добавления заказов на пиццу.
        orders.append((pizza, quantity))
    }
}

//2. Добавьте в класс пиццерии функцию,
//которая будет добавлять новую позицию в меню.

func addMenuItem(name: String, cost: Double) {
    menu[name] = cost
}

//3. Создайте протокол, в котором будут содержаться функции
//открытия и закрытия.

protocol OpenClose {
    func open()
    func close()
}

//4. Написать расширение для класса пиццерии,
//в котором будет реализован протокол из пункта 3.

extension Pizzeria: OpenClose {
    func open() {
        print("Pizzeria is now open!")
    }

    func close() {
        print("Pizzeria is now closed.")
    }
}

//5. Написать функцию, в которой происходит вычитание
//одного числа из другого. Функция должна работать и с Int,
//и с Double.Функция должна возвращать результат вычитания.

func subtract<T: Numeric>(_ a: T, _ b: T) -> T {
    return a - b
}

let result1 = subtract(5, 2) // возвращает Int: 3
let result2 = subtract(3.5, 1.2) // возвращает Double: 2.3


//В этой функции используется обобщенный тип `T`, который ограничен протоколом `Numeric`. 
//Это позволяет функции работать как с целыми числами (`Int`), так и с числами с плавающей запятой (`Double`). 
//Оператор `-` используется для выполнения вычитания и возвращается результат. 
//Примеры использования функции показывают как ситуацию с целыми числами, так и с числами с плавающей запятой.
